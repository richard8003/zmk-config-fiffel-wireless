#include <behaviors.dtsi>
#include <dt-bindings/zmk/modifiers.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keypos.dtsi"

#define CAPS_LOCK   &kp CAPS
#define FLAMESHOT   &kp LS(LG(X))
#define SCREENSHOT  &kp LS(LG(N4))
#define ALT_ESC     &mt LALT ESC
#define L1_BSPC     &lt 1 BSPC 
#define CMD_TAB     &mt LGUI TAB
#define CTRL_RET    &mt RCTRL RET 
#define L1_SPC      &lt 1 SPACE 
#define ALT         &kp RALT
#define NONE        &none

&lt {
   quick-tap-ms = <200>;
}; 

&soft_off {
   hold-time-ms = <2000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {

  combos {
    #include "combo_strings.dtsi"
    compatible = "zmk,combos";
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      display-name = "Default Layer";
      bindings = <
/*    ╭───────────┬──────────┬──────────┬──────────┬──────────┬──────────╮        ╭─────────────┬──────────┬──────────┬──────────┬──────────┬──────────╮ */
/*    │           │          │          │          │          │          │        │             │          │          │          │          │          │ */
        FLAMESHOT  &kp Q      &kp W      &kp F      &kp P      &kp B               &kp J         &kp L      &kp U      &kp Y      &kp O         NONE 
/*    ├───────────┼──────────┼──────────┼──────────┼──────────┼──────────┤        ├─────────────┼──────────┼──────────┼──────────┼──────────┼──────────┤ */
/*    │           │          │          │          │          │          │        │             │          │          │          │          │          │ */
        CAPS_LOCK  &kp A      &kp R      &kp S      &kp T      &kp G               &kp M         &kp N      &kp E      &kp I      &kp O         NONE 
/*    ├───────────┼──────────┼──────────┼──────────┼──────────┼──────────┤        ├─────────────┼──────────┼──────────┼──────────┼──────────┼──────────┤ */
/*    │           │          │          │          │          │          │        │             │          │          │          │          │          │ */
       SCREENSHOT  &kp Z      &kp X      &kp C      &kp D      &kp V               &kp K         &kp H      &kp COMMA  &kp DOT    &kp LS(N7)    NONE
/*    ╰───────────┴──────────┴──────────┼──────────┼──────────┼──────────┤        ├─────────────┼──────────┼──────────┼──────────┴──────────┴──────────╯ */
/*                                      │          │          │          │        │             │          │          │                                  */
                                           ALT_ESC    L1_BSPC   CMD_TAB              CTRL_RET      L1_SPC      ALT
/*                                      ╰──────────┴──────────┴──────────╯        ╰─────────────┴──────────┴──────────╯ */
      >;
    };
    layer_two {
      display-name = "Layer two";
      bindings = <
/* #define SLASH       &kp LA(N7) */
/* #define AT          &kp RA(N2) */
/* #define AND         &kp LS(N6)   */
/* #define BACKSLASH   &kp LA(LS(N7)) */
/* #define TILDA       &kp RA(RBKT) */
/* #define HASH        &kp LS(N3) */
/* #define DOLLAR      &kp LA(N4) */
/* #define PROCENT     &kp LS(N5) */
/* #define ODD_TICK    &kp PLUS */
/* #define MORE_THAN   &kp GRAVE  */
/* #define LESS_THAN   &kp LS(GRAVE) */
/**/
/* #define PLS_SIGN    &kp KP_PLUS  */
/* #define ZOOM_IN     &kp LG(FSLH) */
/* #define ZOOM_OUT    &kp LG(MINUS) */
/* #define EQUAL       &kp LS(N0) */
/* #define TIMES       &kp PIPE */

/*    ╭──────────┬───────────┬──────────┬───────────┬───────────────┬─────────────╮   ╭─────────────┬──────────┬──────────┬──────────┬────────────┬─────────────╮ */
/*    │          │     |     │     @    │     &     │       \       │      ~      │   │      +      │    7     │    8     │    9     │  ZOOM IN   │  ZOOM OUT   │ */
       /* &none         SLASH        AT         AND        BACKSLASH        TILDA         &kp KP_PLUS   &kp N7     &kp N8     &kp N9       ZOOM_IN      ZOOM_OUT  */
       &kp LC(LG(LA(U)))      &kp LA(N7)  &kp RA(N2) &kp LS(N6)  &kp LA(LS(N7))  &kp RA(RBKT)      &kp KP_PLUS   &kp N7     &kp N8     &kp N9     &kp LG(FSLH) &kp LG(MINUS)
/*    ├──────────┼───────── ─┼──────────┼───────── ─┼─────     ─────┼─────   ─────┤   ├─────────────┼──────────┼──────────┼──────────┼────────────┼─────────────┤ */
/*    │          │           │          │     #     │       $       │      %      │   │      =      │    8     │    5     │    6     │            │             │ */
       /* &none      &kp A       &kp R         HASH          DOLLAR        PROCENT            EQUAL     &kp N4     &kp N5     &kp N6     &kp O        &none */
       &kp LC(LG(LA(V)))      &kp A       &kp R      &kp LS(N3)  &kp LA(N4)      &kp LS(N5)        &kp LS(N0)    &kp N4     &kp N5     &kp N6     &kp O        &none
/*    ├──────────┼───────────┼──────────┼───────────┼───────────────┼─────────────┤   ├─────────────┼──────────┼──────────┼──────────┼────────────┼─────────────┤ */
/*    │          │     `     │    <     │     >     │               │             │   │      *      │    9     │    2     │    3     │            │             │ */
       /* &none       ODD_TICK   MORE_THAN   LESS_THAN       &none         &kp V              PIPE      &kp N1     &kp N2     &kp N3     &kp FSLH     &none */
       &none      &kp PLUS   &kp GRAVE   &kp LS(GRAVE) &kp Z         &kp V             &kp PIPE      &kp N1     &kp N2     &kp N3     &kp FSLH     &none
/*    ╰──────────┴───────────┴──────────┼───────────┼───────────────┼─────────────┤   ├─────────────┼──────────┼──────────┼──────────┴────────────┴─────────────╯ */
/*                                      │           │               │             │   │             │          │    0     │                                  */
                                         &none       &kp LEFT        &kp RIGHT         &kp DOWN      &kp UP     &kp N0
/*                                      ╰───────────┴───────────────┴─────────────╯   ╰─────────────┴──────────┴──────────╯ */
      >;
    };
    layer_three {
      display-name = "Layer three";
      bindings = <
/*    ╭──────────┬──────────┬──────────────┬──────────────┬───────────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────┬──────────╮ */
/*    │          │          │              │              │               │          │   │          │          │          │          │          │          │ */
       &kp TAB    &kp Q      &kp LC(LA(N7)) &kp LC(LA(N8)) &kp LC(LA(N9))  &kp B          &kp J      &kp LC(LA(LS(N7)))     &kp LC(LA(LS(N8)))     &kp LC(LA(LS(N9)))     &kp O      &kp BSPC
/*    ├──────────┼──────────┼──────────────┼──────────────┼───────────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤ */
/*    │          │          │              │              │               │          │   │          │          │          │          │          │          │ */
       &kp LCTRL  &kp X      &kp LC(LA(N4)) &kp LC(LA(N5)) &kp LC(LA(N6))  &kp G          &kp M      &kp LC(LA(LS(N4)))      &kp LC(LA(LS(N5)))      &kp LC(LA(LS(N6)))      &kp P      &kp SQT
/*    ├──────────┼──────────┼──────────────┼──────────────┼───────────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┼──────────┤ */
/*    │          │          │              │              │               │          │   │          │          │          │          │          │          │ */
       &kp LSHFT  &kp Z      &kp LC(LA(N1)) &kp LC(LA(N2)) &kp LC(LA(N3))  &kp V          &kp K      &kp LC(LA(LS(N1)))     &kp LC(LA(LS(N2)))     &kp LC(LA(LS(N3)))     &kp FSLH   &kp ESC
/*    ╰──────────┴──────────┴──────────────┼──────────────┼───────────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┴──────────┴──────────╯ */
/*                                         │              │               │          │   │          │          │          │                                  */
                                            &kp LGUI       &kp BSPC        &kp SPACE      &kp RET    &kp SPACE  &kp A 
/*                                         ╰──────────────┴───────────────┴──────────╯   ╰──────────┴──────────┴──────────╯ */
      >;
    };

  };
};

